// source: RCRSProto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ChangeSetProto', null, global);
goog.exportSymbol('proto.ChangeSetProto.EntityChangeProto', null, global);
goog.exportSymbol('proto.ConfigProto', null, global);
goog.exportSymbol('proto.EdgeListProto', null, global);
goog.exportSymbol('proto.EdgeProto', null, global);
goog.exportSymbol('proto.EntityListProto', null, global);
goog.exportSymbol('proto.EntityProto', null, global);
goog.exportSymbol('proto.EntityURN', null, global);
goog.exportSymbol('proto.FloatListProto', null, global);
goog.exportSymbol('proto.IntListProto', null, global);
goog.exportSymbol('proto.IntMatrixProto', null, global);
goog.exportSymbol('proto.MessageComponentProto', null, global);
goog.exportSymbol('proto.MessageComponentProto.ComponentCase', null, global);
goog.exportSymbol('proto.MessageListProto', null, global);
goog.exportSymbol('proto.MessageProto', null, global);
goog.exportSymbol('proto.MsgURN', null, global);
goog.exportSymbol('proto.Point2DProto', null, global);
goog.exportSymbol('proto.PropertyProto', null, global);
goog.exportSymbol('proto.PropertyProto.ValueCase', null, global);
goog.exportSymbol('proto.PropertyURN', null, global);
goog.exportSymbol('proto.StrListProto', null, global);
goog.exportSymbol('proto.ValueProto', null, global);
goog.exportSymbol('proto.ValueProto.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageProto.displayName = 'proto.MessageProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageListProto.repeatedFields_, null);
};
goog.inherits(proto.MessageListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageListProto.displayName = 'proto.MessageListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageComponentProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.MessageComponentProto.oneofGroups_);
};
goog.inherits(proto.MessageComponentProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageComponentProto.displayName = 'proto.MessageComponentProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StrListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StrListProto.repeatedFields_, null);
};
goog.inherits(proto.StrListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StrListProto.displayName = 'proto.StrListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IntListProto.repeatedFields_, null);
};
goog.inherits(proto.IntListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntListProto.displayName = 'proto.IntListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FloatListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FloatListProto.repeatedFields_, null);
};
goog.inherits(proto.FloatListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FloatListProto.displayName = 'proto.FloatListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntMatrixProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IntMatrixProto.repeatedFields_, null);
};
goog.inherits(proto.IntMatrixProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntMatrixProto.displayName = 'proto.IntMatrixProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ValueProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ValueProto.oneofGroups_);
};
goog.inherits(proto.ValueProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ValueProto.displayName = 'proto.ValueProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PropertyProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.PropertyProto.oneofGroups_);
};
goog.inherits(proto.PropertyProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PropertyProto.displayName = 'proto.PropertyProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Point2DProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Point2DProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Point2DProto.displayName = 'proto.Point2DProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityProto.repeatedFields_, null);
};
goog.inherits(proto.EntityProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EntityProto.displayName = 'proto.EntityProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityListProto.repeatedFields_, null);
};
goog.inherits(proto.EntityListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EntityListProto.displayName = 'proto.EntityListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigProto.displayName = 'proto.ConfigProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EdgeListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EdgeListProto.repeatedFields_, null);
};
goog.inherits(proto.EdgeListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EdgeListProto.displayName = 'proto.EdgeListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EdgeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EdgeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EdgeProto.displayName = 'proto.EdgeProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeSetProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChangeSetProto.repeatedFields_, null);
};
goog.inherits(proto.ChangeSetProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeSetProto.displayName = 'proto.ChangeSetProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeSetProto.EntityChangeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChangeSetProto.EntityChangeProto.repeatedFields_, null);
};
goog.inherits(proto.ChangeSetProto.EntityChangeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeSetProto.EntityChangeProto.displayName = 'proto.ChangeSetProto.EntityChangeProto';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    urn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    componentsMap: (f = msg.getComponentsMap()) ? f.toObject(includeInstance, proto.MessageComponentProto.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageProto}
 */
proto.MessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageProto;
  return proto.MessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageProto}
 */
proto.MessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MsgURN} */ (reader.readEnum());
      msg.setUrn(value);
      break;
    case 2:
      var value = msg.getComponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.MessageComponentProto.deserializeBinaryFromReader, "", new proto.MessageComponentProto());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getComponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.MessageComponentProto.serializeBinaryToWriter);
  }
};


/**
 * optional MsgURN urn = 1;
 * @return {!proto.MsgURN}
 */
proto.MessageProto.prototype.getUrn = function() {
  return /** @type {!proto.MsgURN} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MsgURN} value
 * @return {!proto.MessageProto} returns this
 */
proto.MessageProto.prototype.setUrn = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, MessageComponentProto> components = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.MessageComponentProto>}
 */
proto.MessageProto.prototype.getComponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.MessageComponentProto>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.MessageComponentProto));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.MessageProto} returns this
 */
proto.MessageProto.prototype.clearComponentsMap = function() {
  this.getComponentsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.MessageProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageListProto}
 */
proto.MessageListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageListProto;
  return proto.MessageListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageListProto}
 */
proto.MessageListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MessageProto;
      reader.readMessage(value,proto.MessageProto.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MessageProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MessageProto commands = 1;
 * @return {!Array<!proto.MessageProto>}
 */
proto.MessageListProto.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.MessageProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MessageProto, 1));
};


/**
 * @param {!Array<!proto.MessageProto>} value
 * @return {!proto.MessageListProto} returns this
*/
proto.MessageListProto.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MessageProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MessageProto}
 */
proto.MessageListProto.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MessageProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MessageListProto} returns this
 */
proto.MessageListProto.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MessageComponentProto.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.MessageComponentProto.ComponentCase = {
  COMPONENT_NOT_SET: 0,
  CHANGESET: 1,
  COMMANDLIST: 2,
  CONFIG: 3,
  ENTITY: 4,
  ENTITYID: 5,
  ENTITYIDLIST: 6,
  ENTITYLIST: 7,
  FLOATLIST: 8,
  INTVALUE: 9,
  INTLIST: 10,
  RAWDATA: 11,
  STRINGVALUE: 12,
  STRINGLIST: 13
};

/**
 * @return {proto.MessageComponentProto.ComponentCase}
 */
proto.MessageComponentProto.prototype.getComponentCase = function() {
  return /** @type {proto.MessageComponentProto.ComponentCase} */(jspb.Message.computeOneofCase(this, proto.MessageComponentProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageComponentProto.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageComponentProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageComponentProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageComponentProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    changeset: (f = msg.getChangeset()) && proto.ChangeSetProto.toObject(includeInstance, f),
    commandlist: (f = msg.getCommandlist()) && proto.MessageListProto.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.ConfigProto.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && proto.EntityProto.toObject(includeInstance, f),
    entityid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    entityidlist: (f = msg.getEntityidlist()) && proto.IntListProto.toObject(includeInstance, f),
    entitylist: (f = msg.getEntitylist()) && proto.EntityListProto.toObject(includeInstance, f),
    floatlist: (f = msg.getFloatlist()) && proto.FloatListProto.toObject(includeInstance, f),
    intvalue: jspb.Message.getFieldWithDefault(msg, 9, 0),
    intlist: (f = msg.getIntlist()) && proto.IntListProto.toObject(includeInstance, f),
    rawdata: msg.getRawdata_asB64(),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 12, ""),
    stringlist: (f = msg.getStringlist()) && proto.StrListProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageComponentProto}
 */
proto.MessageComponentProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageComponentProto;
  return proto.MessageComponentProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageComponentProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageComponentProto}
 */
proto.MessageComponentProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChangeSetProto;
      reader.readMessage(value,proto.ChangeSetProto.deserializeBinaryFromReader);
      msg.setChangeset(value);
      break;
    case 2:
      var value = new proto.MessageListProto;
      reader.readMessage(value,proto.MessageListProto.deserializeBinaryFromReader);
      msg.setCommandlist(value);
      break;
    case 3:
      var value = new proto.ConfigProto;
      reader.readMessage(value,proto.ConfigProto.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 4:
      var value = new proto.EntityProto;
      reader.readMessage(value,proto.EntityProto.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityid(value);
      break;
    case 6:
      var value = new proto.IntListProto;
      reader.readMessage(value,proto.IntListProto.deserializeBinaryFromReader);
      msg.setEntityidlist(value);
      break;
    case 7:
      var value = new proto.EntityListProto;
      reader.readMessage(value,proto.EntityListProto.deserializeBinaryFromReader);
      msg.setEntitylist(value);
      break;
    case 8:
      var value = new proto.FloatListProto;
      reader.readMessage(value,proto.FloatListProto.deserializeBinaryFromReader);
      msg.setFloatlist(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntvalue(value);
      break;
    case 10:
      var value = new proto.IntListProto;
      reader.readMessage(value,proto.IntListProto.deserializeBinaryFromReader);
      msg.setIntlist(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawdata(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 13:
      var value = new proto.StrListProto;
      reader.readMessage(value,proto.StrListProto.deserializeBinaryFromReader);
      msg.setStringlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageComponentProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageComponentProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageComponentProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageComponentProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangeset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChangeSetProto.serializeBinaryToWriter
    );
  }
  f = message.getCommandlist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MessageListProto.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ConfigProto.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EntityProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEntityidlist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.IntListProto.serializeBinaryToWriter
    );
  }
  f = message.getEntitylist();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.EntityListProto.serializeBinaryToWriter
    );
  }
  f = message.getFloatlist();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.FloatListProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getIntlist();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.IntListProto.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStringlist();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.StrListProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChangeSetProto changeSet = 1;
 * @return {?proto.ChangeSetProto}
 */
proto.MessageComponentProto.prototype.getChangeset = function() {
  return /** @type{?proto.ChangeSetProto} */ (
    jspb.Message.getWrapperField(this, proto.ChangeSetProto, 1));
};


/**
 * @param {?proto.ChangeSetProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setChangeset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearChangeset = function() {
  return this.setChangeset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasChangeset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageListProto commandList = 2;
 * @return {?proto.MessageListProto}
 */
proto.MessageComponentProto.prototype.getCommandlist = function() {
  return /** @type{?proto.MessageListProto} */ (
    jspb.Message.getWrapperField(this, proto.MessageListProto, 2));
};


/**
 * @param {?proto.MessageListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setCommandlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearCommandlist = function() {
  return this.setCommandlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasCommandlist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigProto config = 3;
 * @return {?proto.ConfigProto}
 */
proto.MessageComponentProto.prototype.getConfig = function() {
  return /** @type{?proto.ConfigProto} */ (
    jspb.Message.getWrapperField(this, proto.ConfigProto, 3));
};


/**
 * @param {?proto.ConfigProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EntityProto entity = 4;
 * @return {?proto.EntityProto}
 */
proto.MessageComponentProto.prototype.getEntity = function() {
  return /** @type{?proto.EntityProto} */ (
    jspb.Message.getWrapperField(this, proto.EntityProto, 4));
};


/**
 * @param {?proto.EntityProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setEntity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 entityID = 5;
 * @return {number}
 */
proto.MessageComponentProto.prototype.getEntityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.setEntityid = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearEntityid = function() {
  return jspb.Message.setOneofField(this, 5, proto.MessageComponentProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasEntityid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IntListProto entityIDList = 6;
 * @return {?proto.IntListProto}
 */
proto.MessageComponentProto.prototype.getEntityidlist = function() {
  return /** @type{?proto.IntListProto} */ (
    jspb.Message.getWrapperField(this, proto.IntListProto, 6));
};


/**
 * @param {?proto.IntListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setEntityidlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearEntityidlist = function() {
  return this.setEntityidlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasEntityidlist = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EntityListProto entityList = 7;
 * @return {?proto.EntityListProto}
 */
proto.MessageComponentProto.prototype.getEntitylist = function() {
  return /** @type{?proto.EntityListProto} */ (
    jspb.Message.getWrapperField(this, proto.EntityListProto, 7));
};


/**
 * @param {?proto.EntityListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setEntitylist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearEntitylist = function() {
  return this.setEntitylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasEntitylist = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FloatListProto floatList = 8;
 * @return {?proto.FloatListProto}
 */
proto.MessageComponentProto.prototype.getFloatlist = function() {
  return /** @type{?proto.FloatListProto} */ (
    jspb.Message.getWrapperField(this, proto.FloatListProto, 8));
};


/**
 * @param {?proto.FloatListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setFloatlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearFloatlist = function() {
  return this.setFloatlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasFloatlist = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 intValue = 9;
 * @return {number}
 */
proto.MessageComponentProto.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.setIntvalue = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearIntvalue = function() {
  return jspb.Message.setOneofField(this, 9, proto.MessageComponentProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasIntvalue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional IntListProto intList = 10;
 * @return {?proto.IntListProto}
 */
proto.MessageComponentProto.prototype.getIntlist = function() {
  return /** @type{?proto.IntListProto} */ (
    jspb.Message.getWrapperField(this, proto.IntListProto, 10));
};


/**
 * @param {?proto.IntListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setIntlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearIntlist = function() {
  return this.setIntlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasIntlist = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes rawData = 11;
 * @return {string}
 */
proto.MessageComponentProto.prototype.getRawdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes rawData = 11;
 * This is a type-conversion wrapper around `getRawdata()`
 * @return {string}
 */
proto.MessageComponentProto.prototype.getRawdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawdata()));
};


/**
 * optional bytes rawData = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawdata()`
 * @return {!Uint8Array}
 */
proto.MessageComponentProto.prototype.getRawdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.setRawdata = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearRawdata = function() {
  return jspb.Message.setOneofField(this, 11, proto.MessageComponentProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasRawdata = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string stringValue = 12;
 * @return {string}
 */
proto.MessageComponentProto.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 12, proto.MessageComponentProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StrListProto stringList = 13;
 * @return {?proto.StrListProto}
 */
proto.MessageComponentProto.prototype.getStringlist = function() {
  return /** @type{?proto.StrListProto} */ (
    jspb.Message.getWrapperField(this, proto.StrListProto, 13));
};


/**
 * @param {?proto.StrListProto|undefined} value
 * @return {!proto.MessageComponentProto} returns this
*/
proto.MessageComponentProto.prototype.setStringlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.MessageComponentProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MessageComponentProto} returns this
 */
proto.MessageComponentProto.prototype.clearStringlist = function() {
  return this.setStringlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MessageComponentProto.prototype.hasStringlist = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StrListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StrListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.StrListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StrListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StrListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StrListProto}
 */
proto.StrListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StrListProto;
  return proto.StrListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StrListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StrListProto}
 */
proto.StrListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StrListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StrListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StrListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StrListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.StrListProto.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.StrListProto} returns this
 */
proto.StrListProto.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.StrListProto} returns this
 */
proto.StrListProto.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.StrListProto} returns this
 */
proto.StrListProto.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IntListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.IntListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntListProto}
 */
proto.IntListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntListProto;
  return proto.IntListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntListProto}
 */
proto.IntListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 values = 1;
 * @return {!Array<number>}
 */
proto.IntListProto.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IntListProto} returns this
 */
proto.IntListProto.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IntListProto} returns this
 */
proto.IntListProto.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IntListProto} returns this
 */
proto.IntListProto.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FloatListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FloatListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.FloatListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FloatListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FloatListProto}
 */
proto.FloatListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FloatListProto;
  return proto.FloatListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FloatListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FloatListProto}
 */
proto.FloatListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FloatListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FloatListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FloatListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float values = 1;
 * @return {!Array<number>}
 */
proto.FloatListProto.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.FloatListProto} returns this
 */
proto.FloatListProto.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.FloatListProto} returns this
 */
proto.FloatListProto.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FloatListProto} returns this
 */
proto.FloatListProto.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IntMatrixProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntMatrixProto.prototype.toObject = function(opt_includeInstance) {
  return proto.IntMatrixProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntMatrixProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntMatrixProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.IntListProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntMatrixProto}
 */
proto.IntMatrixProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntMatrixProto;
  return proto.IntMatrixProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntMatrixProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntMatrixProto}
 */
proto.IntMatrixProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IntListProto;
      reader.readMessage(value,proto.IntListProto.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntMatrixProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntMatrixProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntMatrixProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntMatrixProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IntListProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IntListProto values = 1;
 * @return {!Array<!proto.IntListProto>}
 */
proto.IntMatrixProto.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.IntListProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IntListProto, 1));
};


/**
 * @param {!Array<!proto.IntListProto>} value
 * @return {!proto.IntMatrixProto} returns this
*/
proto.IntMatrixProto.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IntListProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IntListProto}
 */
proto.IntMatrixProto.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IntListProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IntMatrixProto} returns this
 */
proto.IntMatrixProto.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ValueProto.oneofGroups_ = [[2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.ValueProto.ValueCase = {
  VALUE_NOT_SET: 0,
  INTVALUE: 2,
  BOOLVALUE: 3,
  DOUBLEVALUE: 4,
  BYTELIST: 5,
  INTLIST: 6,
  INTMATRIX: 7,
  EDGELIST: 8,
  POINT2D: 9
};

/**
 * @return {proto.ValueProto.ValueCase}
 */
proto.ValueProto.prototype.getValueCase = function() {
  return /** @type {proto.ValueProto.ValueCase} */(jspb.Message.computeOneofCase(this, proto.ValueProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ValueProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ValueProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ValueProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    defined: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    intvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    boolvalue: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    doublevalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    bytelist: msg.getBytelist_asB64(),
    intlist: (f = msg.getIntlist()) && proto.IntListProto.toObject(includeInstance, f),
    intmatrix: (f = msg.getIntmatrix()) && proto.IntMatrixProto.toObject(includeInstance, f),
    edgelist: (f = msg.getEdgelist()) && proto.EdgeListProto.toObject(includeInstance, f),
    point2d: (f = msg.getPoint2d()) && proto.Point2DProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ValueProto}
 */
proto.ValueProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ValueProto;
  return proto.ValueProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ValueProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ValueProto}
 */
proto.ValueProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefined(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntvalue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolvalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytelist(value);
      break;
    case 6:
      var value = new proto.IntListProto;
      reader.readMessage(value,proto.IntListProto.deserializeBinaryFromReader);
      msg.setIntlist(value);
      break;
    case 7:
      var value = new proto.IntMatrixProto;
      reader.readMessage(value,proto.IntMatrixProto.deserializeBinaryFromReader);
      msg.setIntmatrix(value);
      break;
    case 8:
      var value = new proto.EdgeListProto;
      reader.readMessage(value,proto.EdgeListProto.deserializeBinaryFromReader);
      msg.setEdgelist(value);
      break;
    case 9:
      var value = new proto.Point2DProto;
      reader.readMessage(value,proto.Point2DProto.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ValueProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ValueProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ValueProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValueProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefined();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getIntlist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.IntListProto.serializeBinaryToWriter
    );
  }
  f = message.getIntmatrix();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.IntMatrixProto.serializeBinaryToWriter
    );
  }
  f = message.getEdgelist();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.EdgeListProto.serializeBinaryToWriter
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Point2DProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool defined = 1;
 * @return {boolean}
 */
proto.ValueProto.prototype.getDefined = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.setDefined = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 intValue = 2;
 * @return {number}
 */
proto.ValueProto.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.setIntvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearIntvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.ValueProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasIntvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool boolValue = 3;
 * @return {boolean}
 */
proto.ValueProto.prototype.getBoolvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.setBoolvalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearBoolvalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.ValueProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasBoolvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double doubleValue = 4;
 * @return {number}
 */
proto.ValueProto.prototype.getDoublevalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.setDoublevalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearDoublevalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.ValueProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasDoublevalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes byteList = 5;
 * @return {string}
 */
proto.ValueProto.prototype.getBytelist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes byteList = 5;
 * This is a type-conversion wrapper around `getBytelist()`
 * @return {string}
 */
proto.ValueProto.prototype.getBytelist_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytelist()));
};


/**
 * optional bytes byteList = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytelist()`
 * @return {!Uint8Array}
 */
proto.ValueProto.prototype.getBytelist_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytelist()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.setBytelist = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearBytelist = function() {
  return jspb.Message.setOneofField(this, 5, proto.ValueProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasBytelist = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IntListProto intList = 6;
 * @return {?proto.IntListProto}
 */
proto.ValueProto.prototype.getIntlist = function() {
  return /** @type{?proto.IntListProto} */ (
    jspb.Message.getWrapperField(this, proto.IntListProto, 6));
};


/**
 * @param {?proto.IntListProto|undefined} value
 * @return {!proto.ValueProto} returns this
*/
proto.ValueProto.prototype.setIntlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearIntlist = function() {
  return this.setIntlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasIntlist = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional IntMatrixProto intMatrix = 7;
 * @return {?proto.IntMatrixProto}
 */
proto.ValueProto.prototype.getIntmatrix = function() {
  return /** @type{?proto.IntMatrixProto} */ (
    jspb.Message.getWrapperField(this, proto.IntMatrixProto, 7));
};


/**
 * @param {?proto.IntMatrixProto|undefined} value
 * @return {!proto.ValueProto} returns this
*/
proto.ValueProto.prototype.setIntmatrix = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearIntmatrix = function() {
  return this.setIntmatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasIntmatrix = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EdgeListProto edgeList = 8;
 * @return {?proto.EdgeListProto}
 */
proto.ValueProto.prototype.getEdgelist = function() {
  return /** @type{?proto.EdgeListProto} */ (
    jspb.Message.getWrapperField(this, proto.EdgeListProto, 8));
};


/**
 * @param {?proto.EdgeListProto|undefined} value
 * @return {!proto.ValueProto} returns this
*/
proto.ValueProto.prototype.setEdgelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearEdgelist = function() {
  return this.setEdgelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasEdgelist = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Point2DProto point2D = 9;
 * @return {?proto.Point2DProto}
 */
proto.ValueProto.prototype.getPoint2d = function() {
  return /** @type{?proto.Point2DProto} */ (
    jspb.Message.getWrapperField(this, proto.Point2DProto, 9));
};


/**
 * @param {?proto.Point2DProto|undefined} value
 * @return {!proto.ValueProto} returns this
*/
proto.ValueProto.prototype.setPoint2d = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.ValueProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ValueProto} returns this
 */
proto.ValueProto.prototype.clearPoint2d = function() {
  return this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ValueProto.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.PropertyProto.oneofGroups_ = [[3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.PropertyProto.ValueCase = {
  VALUE_NOT_SET: 0,
  INTVALUE: 3,
  BOOLVALUE: 4,
  DOUBLEVALUE: 5,
  BYTELIST: 6,
  INTLIST: 7,
  INTMATRIX: 8,
  EDGELIST: 9,
  POINT2D: 10
};

/**
 * @return {proto.PropertyProto.ValueCase}
 */
proto.PropertyProto.prototype.getValueCase = function() {
  return /** @type {proto.PropertyProto.ValueCase} */(jspb.Message.computeOneofCase(this, proto.PropertyProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PropertyProto.prototype.toObject = function(opt_includeInstance) {
  return proto.PropertyProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PropertyProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    urn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    defined: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    intvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    boolvalue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    doublevalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    bytelist: msg.getBytelist_asB64(),
    intlist: (f = msg.getIntlist()) && proto.IntListProto.toObject(includeInstance, f),
    intmatrix: (f = msg.getIntmatrix()) && proto.IntMatrixProto.toObject(includeInstance, f),
    edgelist: (f = msg.getEdgelist()) && proto.EdgeListProto.toObject(includeInstance, f),
    point2d: (f = msg.getPoint2d()) && proto.Point2DProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PropertyProto}
 */
proto.PropertyProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PropertyProto;
  return proto.PropertyProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PropertyProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PropertyProto}
 */
proto.PropertyProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PropertyURN} */ (reader.readEnum());
      msg.setUrn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefined(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntvalue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolvalue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytelist(value);
      break;
    case 7:
      var value = new proto.IntListProto;
      reader.readMessage(value,proto.IntListProto.deserializeBinaryFromReader);
      msg.setIntlist(value);
      break;
    case 8:
      var value = new proto.IntMatrixProto;
      reader.readMessage(value,proto.IntMatrixProto.deserializeBinaryFromReader);
      msg.setIntmatrix(value);
      break;
    case 9:
      var value = new proto.EdgeListProto;
      reader.readMessage(value,proto.EdgeListProto.deserializeBinaryFromReader);
      msg.setEdgelist(value);
      break;
    case 10:
      var value = new proto.Point2DProto;
      reader.readMessage(value,proto.Point2DProto.deserializeBinaryFromReader);
      msg.setPoint2d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PropertyProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PropertyProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PropertyProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDefined();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getIntlist();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.IntListProto.serializeBinaryToWriter
    );
  }
  f = message.getIntmatrix();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.IntMatrixProto.serializeBinaryToWriter
    );
  }
  f = message.getEdgelist();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.EdgeListProto.serializeBinaryToWriter
    );
  }
  f = message.getPoint2d();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Point2DProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional PropertyURN urn = 1;
 * @return {!proto.PropertyURN}
 */
proto.PropertyProto.prototype.getUrn = function() {
  return /** @type {!proto.PropertyURN} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.PropertyURN} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setUrn = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool defined = 2;
 * @return {boolean}
 */
proto.PropertyProto.prototype.getDefined = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setDefined = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 intValue = 3;
 * @return {number}
 */
proto.PropertyProto.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setIntvalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearIntvalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.PropertyProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasIntvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool boolValue = 4;
 * @return {boolean}
 */
proto.PropertyProto.prototype.getBoolvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setBoolvalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearBoolvalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.PropertyProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasBoolvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double doubleValue = 5;
 * @return {number}
 */
proto.PropertyProto.prototype.getDoublevalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setDoublevalue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearDoublevalue = function() {
  return jspb.Message.setOneofField(this, 5, proto.PropertyProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasDoublevalue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes byteList = 6;
 * @return {string}
 */
proto.PropertyProto.prototype.getBytelist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes byteList = 6;
 * This is a type-conversion wrapper around `getBytelist()`
 * @return {string}
 */
proto.PropertyProto.prototype.getBytelist_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytelist()));
};


/**
 * optional bytes byteList = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytelist()`
 * @return {!Uint8Array}
 */
proto.PropertyProto.prototype.getBytelist_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytelist()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.setBytelist = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearBytelist = function() {
  return jspb.Message.setOneofField(this, 6, proto.PropertyProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasBytelist = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional IntListProto intList = 7;
 * @return {?proto.IntListProto}
 */
proto.PropertyProto.prototype.getIntlist = function() {
  return /** @type{?proto.IntListProto} */ (
    jspb.Message.getWrapperField(this, proto.IntListProto, 7));
};


/**
 * @param {?proto.IntListProto|undefined} value
 * @return {!proto.PropertyProto} returns this
*/
proto.PropertyProto.prototype.setIntlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearIntlist = function() {
  return this.setIntlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasIntlist = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional IntMatrixProto intMatrix = 8;
 * @return {?proto.IntMatrixProto}
 */
proto.PropertyProto.prototype.getIntmatrix = function() {
  return /** @type{?proto.IntMatrixProto} */ (
    jspb.Message.getWrapperField(this, proto.IntMatrixProto, 8));
};


/**
 * @param {?proto.IntMatrixProto|undefined} value
 * @return {!proto.PropertyProto} returns this
*/
proto.PropertyProto.prototype.setIntmatrix = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearIntmatrix = function() {
  return this.setIntmatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasIntmatrix = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EdgeListProto edgeList = 9;
 * @return {?proto.EdgeListProto}
 */
proto.PropertyProto.prototype.getEdgelist = function() {
  return /** @type{?proto.EdgeListProto} */ (
    jspb.Message.getWrapperField(this, proto.EdgeListProto, 9));
};


/**
 * @param {?proto.EdgeListProto|undefined} value
 * @return {!proto.PropertyProto} returns this
*/
proto.PropertyProto.prototype.setEdgelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearEdgelist = function() {
  return this.setEdgelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasEdgelist = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Point2DProto point2D = 10;
 * @return {?proto.Point2DProto}
 */
proto.PropertyProto.prototype.getPoint2d = function() {
  return /** @type{?proto.Point2DProto} */ (
    jspb.Message.getWrapperField(this, proto.Point2DProto, 10));
};


/**
 * @param {?proto.Point2DProto|undefined} value
 * @return {!proto.PropertyProto} returns this
*/
proto.PropertyProto.prototype.setPoint2d = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.PropertyProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyProto} returns this
 */
proto.PropertyProto.prototype.clearPoint2d = function() {
  return this.setPoint2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyProto.prototype.hasPoint2d = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Point2DProto.prototype.toObject = function(opt_includeInstance) {
  return proto.Point2DProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Point2DProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Point2DProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Point2DProto}
 */
proto.Point2DProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Point2DProto;
  return proto.Point2DProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Point2DProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Point2DProto}
 */
proto.Point2DProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Point2DProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Point2DProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Point2DProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Point2DProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double X = 1;
 * @return {number}
 */
proto.Point2DProto.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Point2DProto} returns this
 */
proto.Point2DProto.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double Y = 2;
 * @return {number}
 */
proto.Point2DProto.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Point2DProto} returns this
 */
proto.Point2DProto.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityProto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityProto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    urn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entityid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.PropertyProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityProto}
 */
proto.EntityProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityProto;
  return proto.EntityProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityProto}
 */
proto.EntityProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.EntityURN} */ (reader.readEnum());
      msg.setUrn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityid(value);
      break;
    case 3:
      var value = new proto.PropertyProto;
      reader.readMessage(value,proto.PropertyProto.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EntityProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EntityProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEntityid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PropertyProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional EntityURN urn = 1;
 * @return {!proto.EntityURN}
 */
proto.EntityProto.prototype.getUrn = function() {
  return /** @type {!proto.EntityURN} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.EntityURN} value
 * @return {!proto.EntityProto} returns this
 */
proto.EntityProto.prototype.setUrn = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 entityID = 2;
 * @return {number}
 */
proto.EntityProto.prototype.getEntityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EntityProto} returns this
 */
proto.EntityProto.prototype.setEntityid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PropertyProto properties = 3;
 * @return {!Array<!proto.PropertyProto>}
 */
proto.EntityProto.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.PropertyProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PropertyProto, 3));
};


/**
 * @param {!Array<!proto.PropertyProto>} value
 * @return {!proto.EntityProto} returns this
*/
proto.EntityProto.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PropertyProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PropertyProto}
 */
proto.EntityProto.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PropertyProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EntityProto} returns this
 */
proto.EntityProto.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.EntityProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityListProto}
 */
proto.EntityListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityListProto;
  return proto.EntityListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityListProto}
 */
proto.EntityListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EntityProto;
      reader.readMessage(value,proto.EntityProto.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EntityListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EntityListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EntityListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EntityProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EntityProto entities = 1;
 * @return {!Array<!proto.EntityProto>}
 */
proto.EntityListProto.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.EntityProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EntityProto, 1));
};


/**
 * @param {!Array<!proto.EntityProto>} value
 * @return {!proto.EntityListProto} returns this
*/
proto.EntityListProto.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EntityProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EntityProto}
 */
proto.EntityListProto.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EntityProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EntityListProto} returns this
 */
proto.EntityListProto.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigProto}
 */
proto.ConfigProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigProto;
  return proto.ConfigProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigProto}
 */
proto.ConfigProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ConfigProto.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ConfigProto} returns this
 */
proto.ConfigProto.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EdgeListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EdgeListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.EdgeListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EdgeListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdgeListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.EdgeProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EdgeListProto}
 */
proto.EdgeListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EdgeListProto;
  return proto.EdgeListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EdgeListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EdgeListProto}
 */
proto.EdgeListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EdgeProto;
      reader.readMessage(value,proto.EdgeProto.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EdgeListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EdgeListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EdgeListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdgeListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EdgeProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EdgeProto edges = 1;
 * @return {!Array<!proto.EdgeProto>}
 */
proto.EdgeListProto.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.EdgeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EdgeProto, 1));
};


/**
 * @param {!Array<!proto.EdgeProto>} value
 * @return {!proto.EdgeListProto} returns this
*/
proto.EdgeListProto.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EdgeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EdgeProto}
 */
proto.EdgeListProto.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EdgeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EdgeListProto} returns this
 */
proto.EdgeListProto.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EdgeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.EdgeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EdgeProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdgeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    startx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    neighbour: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EdgeProto}
 */
proto.EdgeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EdgeProto;
  return proto.EdgeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EdgeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EdgeProto}
 */
proto.EdgeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarty(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNeighbour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EdgeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EdgeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EdgeProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EdgeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEndx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndy();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNeighbour();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 startX = 1;
 * @return {number}
 */
proto.EdgeProto.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EdgeProto} returns this
 */
proto.EdgeProto.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 startY = 2;
 * @return {number}
 */
proto.EdgeProto.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EdgeProto} returns this
 */
proto.EdgeProto.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 endX = 3;
 * @return {number}
 */
proto.EdgeProto.prototype.getEndx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.EdgeProto} returns this
 */
proto.EdgeProto.prototype.setEndx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 endY = 4;
 * @return {number}
 */
proto.EdgeProto.prototype.getEndy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.EdgeProto} returns this
 */
proto.EdgeProto.prototype.setEndy = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 neighbour = 5;
 * @return {number}
 */
proto.EdgeProto.prototype.getNeighbour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.EdgeProto} returns this
 */
proto.EdgeProto.prototype.setNeighbour = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChangeSetProto.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeSetProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeSetProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeSetProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeSetProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.ChangeSetProto.EntityChangeProto.toObject, includeInstance),
    deletesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeSetProto}
 */
proto.ChangeSetProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeSetProto;
  return proto.ChangeSetProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeSetProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeSetProto}
 */
proto.ChangeSetProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChangeSetProto.EntityChangeProto;
      reader.readMessage(value,proto.ChangeSetProto.EntityChangeProto.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDeletes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeSetProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeSetProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeSetProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeSetProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChangeSetProto.EntityChangeProto.serializeBinaryToWriter
    );
  }
  f = message.getDeletesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChangeSetProto.EntityChangeProto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeSetProto.EntityChangeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeSetProto.EntityChangeProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeSetProto.EntityChangeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    urn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.PropertyProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeSetProto.EntityChangeProto}
 */
proto.ChangeSetProto.EntityChangeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeSetProto.EntityChangeProto;
  return proto.ChangeSetProto.EntityChangeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeSetProto.EntityChangeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeSetProto.EntityChangeProto}
 */
proto.ChangeSetProto.EntityChangeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityid(value);
      break;
    case 2:
      var value = /** @type {!proto.EntityURN} */ (reader.readEnum());
      msg.setUrn(value);
      break;
    case 3:
      var value = new proto.PropertyProto;
      reader.readMessage(value,proto.PropertyProto.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeSetProto.EntityChangeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeSetProto.EntityChangeProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeSetProto.EntityChangeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUrn();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PropertyProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 entityID = 1;
 * @return {number}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.getEntityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChangeSetProto.EntityChangeProto} returns this
 */
proto.ChangeSetProto.EntityChangeProto.prototype.setEntityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EntityURN urn = 2;
 * @return {!proto.EntityURN}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.getUrn = function() {
  return /** @type {!proto.EntityURN} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.EntityURN} value
 * @return {!proto.ChangeSetProto.EntityChangeProto} returns this
 */
proto.ChangeSetProto.EntityChangeProto.prototype.setUrn = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated PropertyProto properties = 3;
 * @return {!Array<!proto.PropertyProto>}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.PropertyProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PropertyProto, 3));
};


/**
 * @param {!Array<!proto.PropertyProto>} value
 * @return {!proto.ChangeSetProto.EntityChangeProto} returns this
*/
proto.ChangeSetProto.EntityChangeProto.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PropertyProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PropertyProto}
 */
proto.ChangeSetProto.EntityChangeProto.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PropertyProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChangeSetProto.EntityChangeProto} returns this
 */
proto.ChangeSetProto.EntityChangeProto.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * repeated EntityChangeProto changes = 1;
 * @return {!Array<!proto.ChangeSetProto.EntityChangeProto>}
 */
proto.ChangeSetProto.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.ChangeSetProto.EntityChangeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChangeSetProto.EntityChangeProto, 1));
};


/**
 * @param {!Array<!proto.ChangeSetProto.EntityChangeProto>} value
 * @return {!proto.ChangeSetProto} returns this
*/
proto.ChangeSetProto.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChangeSetProto.EntityChangeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChangeSetProto.EntityChangeProto}
 */
proto.ChangeSetProto.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChangeSetProto.EntityChangeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChangeSetProto} returns this
 */
proto.ChangeSetProto.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};


/**
 * repeated int32 deletes = 2;
 * @return {!Array<number>}
 */
proto.ChangeSetProto.prototype.getDeletesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ChangeSetProto} returns this
 */
proto.ChangeSetProto.prototype.setDeletesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ChangeSetProto} returns this
 */
proto.ChangeSetProto.prototype.addDeletes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChangeSetProto} returns this
 */
proto.ChangeSetProto.prototype.clearDeletesList = function() {
  return this.setDeletesList([]);
};


/**
 * @enum {number}
 */
proto.MsgURN = {
  NONEMSG: 0,
  KG_CONNECT: 1,
  KG_ACKNOWLEDGE: 2,
  GK_CONNECT_OK: 3,
  GK_CONNECT_ERROR: 4,
  SK_CONNECT: 5,
  SK_ACKNOWLEDGE: 6,
  SK_UPDATE: 7,
  KS_CONNECT_OK: 8,
  KS_CONNECT_ERROR: 9,
  KS_UPDATE: 10,
  KS_COMMANDS: 11,
  KS_AFTERSHOCKS_INFO: 12,
  VK_CONNECT: 13,
  VK_ACKNOWLEDGE: 14,
  KV_CONNECT_OK: 15,
  KV_CONNECT_ERROR: 16,
  KV_TIMESTEP: 17,
  AK_CONNECT: 18,
  AK_ACKNOWLEDGE: 19,
  KA_CONNECT_OK: 20,
  KA_CONNECT_ERROR: 21,
  KA_SENSE: 22,
  SHUTDOWN: 23,
  ENTITY_ID_REQUEST: 24,
  ENTITY_ID_RESPONSE: 25,
  AK_REST: 26,
  AK_MOVE: 27,
  AK_LOAD: 28,
  AK_UNLOAD: 29,
  AK_SAY: 30,
  AK_TELL: 31,
  AK_EXTINGUISH: 32,
  AK_RESCUE: 33,
  AK_CLEAR: 34,
  AK_CLEAR_AREA: 35,
  AK_SUBSCRIBE: 36,
  AK_SPEAK: 37
};

/**
 * @enum {number}
 */
proto.EntityURN = {
  NONEENTITY: 0,
  WORLD: 1,
  ROAD: 2,
  BLOCKADE: 3,
  BUILDING: 4,
  REFUGE: 5,
  HYDRANT: 6,
  GAS_STATION: 7,
  FIRE_STATION: 8,
  AMBULANCE_CENTRE: 9,
  POLICE_OFFICE: 10,
  CIVILIAN: 11,
  FIRE_BRIGADE: 12,
  AMBULANCE_TEAM: 13,
  POLICE_FORCE: 14
};

/**
 * @enum {number}
 */
proto.PropertyURN = {
  NONEPROPERTY: 0,
  START_TIME: 1,
  LONGITUDE: 2,
  LATITUDE: 3,
  WIND_FORCE: 4,
  WIND_DIRECTION: 5,
  X: 6,
  Y: 7,
  BLOCKADES: 8,
  REPAIR_COST: 9,
  FLOORS: 10,
  BUILDING_ATTRIBUTES: 11,
  IGNITION: 12,
  FIERYNESS: 13,
  BROKENNESS: 14,
  BUILDING_CODE: 15,
  BUILDING_AREA_GROUND: 16,
  BUILDING_AREA_TOTAL: 17,
  APEXES: 18,
  EDGES: 19,
  POSITION: 20,
  DIRECTION: 21,
  POSITION_HISTORY: 22,
  STAMINA: 23,
  HP: 24,
  DAMAGE: 25,
  BURIEDNESS: 26,
  TRAVEL_DISTANCE: 27,
  WATER_QUANTITY: 28,
  TEMPERATURE: 29,
  IMPORTANCE: 30,
  CAPACITY: 31,
  BEDCAPACITY: 32,
  OCCUPIEDBEDS: 33,
  REFILLCAPACITY: 34,
  WAITINGLISTSIZE: 35
};

goog.object.extend(exports, proto);

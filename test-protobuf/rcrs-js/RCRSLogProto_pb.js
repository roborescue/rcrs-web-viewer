// source: RCRSLogProto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var RCRSProto_pb = require('./RCRSProto_pb.js');
goog.object.extend(proto, RCRSProto_pb);
goog.exportSymbol('proto.CommandLogProto', null, global);
goog.exportSymbol('proto.ConfigLogProto', null, global);
goog.exportSymbol('proto.EndLogProto', null, global);
goog.exportSymbol('proto.InitialConditionsLogProto', null, global);
goog.exportSymbol('proto.LogProto', null, global);
goog.exportSymbol('proto.LogProto.LogCase', null, global);
goog.exportSymbol('proto.LogRecordListProto', null, global);
goog.exportSymbol('proto.PerceptionLogProto', null, global);
goog.exportSymbol('proto.StartLogProto', null, global);
goog.exportSymbol('proto.UpdatesLogProto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogRecordListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LogRecordListProto.repeatedFields_, null);
};
goog.inherits(proto.LogRecordListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LogRecordListProto.displayName = 'proto.LogRecordListProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LogProto.oneofGroups_);
};
goog.inherits(proto.LogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LogProto.displayName = 'proto.LogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StartLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StartLogProto.displayName = 'proto.StartLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitialConditionsLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InitialConditionsLogProto.repeatedFields_, null);
};
goog.inherits(proto.InitialConditionsLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InitialConditionsLogProto.displayName = 'proto.InitialConditionsLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommandLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CommandLogProto.repeatedFields_, null);
};
goog.inherits(proto.CommandLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CommandLogProto.displayName = 'proto.CommandLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PerceptionLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PerceptionLogProto.repeatedFields_, null);
};
goog.inherits(proto.PerceptionLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PerceptionLogProto.displayName = 'proto.PerceptionLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigLogProto.displayName = 'proto.ConfigLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdatesLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdatesLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdatesLogProto.displayName = 'proto.UpdatesLogProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EndLogProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EndLogProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EndLogProto.displayName = 'proto.EndLogProto';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LogRecordListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogRecordListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.LogRecordListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogRecordListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogRecordListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.LogProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogRecordListProto}
 */
proto.LogRecordListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogRecordListProto;
  return proto.LogRecordListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogRecordListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogRecordListProto}
 */
proto.LogRecordListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LogProto;
      reader.readMessage(value,proto.LogProto.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogRecordListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LogRecordListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LogRecordListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogRecordListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.LogProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LogProto records = 1;
 * @return {!Array<!proto.LogProto>}
 */
proto.LogRecordListProto.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.LogProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LogProto, 1));
};


/**
 * @param {!Array<!proto.LogProto>} value
 * @return {!proto.LogRecordListProto} returns this
*/
proto.LogRecordListProto.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.LogProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LogProto}
 */
proto.LogRecordListProto.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.LogProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.LogRecordListProto} returns this
 */
proto.LogRecordListProto.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LogProto.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.LogProto.LogCase = {
  LOG_NOT_SET: 0,
  START: 1,
  INITIALCONDITION: 2,
  COMMAND: 3,
  PERCEPTION: 4,
  CONFIG: 5,
  UPDATE: 6,
  END: 7
};

/**
 * @return {proto.LogProto.LogCase}
 */
proto.LogProto.prototype.getLogCase = function() {
  return /** @type {proto.LogProto.LogCase} */(jspb.Message.computeOneofCase(this, proto.LogProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.LogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.StartLogProto.toObject(includeInstance, f),
    initialcondition: (f = msg.getInitialcondition()) && proto.InitialConditionsLogProto.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.CommandLogProto.toObject(includeInstance, f),
    perception: (f = msg.getPerception()) && proto.PerceptionLogProto.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.ConfigLogProto.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.UpdatesLogProto.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.EndLogProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogProto}
 */
proto.LogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogProto;
  return proto.LogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogProto}
 */
proto.LogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StartLogProto;
      reader.readMessage(value,proto.StartLogProto.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.InitialConditionsLogProto;
      reader.readMessage(value,proto.InitialConditionsLogProto.deserializeBinaryFromReader);
      msg.setInitialcondition(value);
      break;
    case 3:
      var value = new proto.CommandLogProto;
      reader.readMessage(value,proto.CommandLogProto.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 4:
      var value = new proto.PerceptionLogProto;
      reader.readMessage(value,proto.PerceptionLogProto.deserializeBinaryFromReader);
      msg.setPerception(value);
      break;
    case 5:
      var value = new proto.ConfigLogProto;
      reader.readMessage(value,proto.ConfigLogProto.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 6:
      var value = new proto.UpdatesLogProto;
      reader.readMessage(value,proto.UpdatesLogProto.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 7:
      var value = new proto.EndLogProto;
      reader.readMessage(value,proto.EndLogProto.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StartLogProto.serializeBinaryToWriter
    );
  }
  f = message.getInitialcondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.InitialConditionsLogProto.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CommandLogProto.serializeBinaryToWriter
    );
  }
  f = message.getPerception();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PerceptionLogProto.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ConfigLogProto.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.UpdatesLogProto.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.EndLogProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional StartLogProto start = 1;
 * @return {?proto.StartLogProto}
 */
proto.LogProto.prototype.getStart = function() {
  return /** @type{?proto.StartLogProto} */ (
    jspb.Message.getWrapperField(this, proto.StartLogProto, 1));
};


/**
 * @param {?proto.StartLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InitialConditionsLogProto initialCondition = 2;
 * @return {?proto.InitialConditionsLogProto}
 */
proto.LogProto.prototype.getInitialcondition = function() {
  return /** @type{?proto.InitialConditionsLogProto} */ (
    jspb.Message.getWrapperField(this, proto.InitialConditionsLogProto, 2));
};


/**
 * @param {?proto.InitialConditionsLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setInitialcondition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearInitialcondition = function() {
  return this.setInitialcondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasInitialcondition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandLogProto command = 3;
 * @return {?proto.CommandLogProto}
 */
proto.LogProto.prototype.getCommand = function() {
  return /** @type{?proto.CommandLogProto} */ (
    jspb.Message.getWrapperField(this, proto.CommandLogProto, 3));
};


/**
 * @param {?proto.CommandLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PerceptionLogProto perception = 4;
 * @return {?proto.PerceptionLogProto}
 */
proto.LogProto.prototype.getPerception = function() {
  return /** @type{?proto.PerceptionLogProto} */ (
    jspb.Message.getWrapperField(this, proto.PerceptionLogProto, 4));
};


/**
 * @param {?proto.PerceptionLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setPerception = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearPerception = function() {
  return this.setPerception(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasPerception = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ConfigLogProto config = 5;
 * @return {?proto.ConfigLogProto}
 */
proto.LogProto.prototype.getConfig = function() {
  return /** @type{?proto.ConfigLogProto} */ (
    jspb.Message.getWrapperField(this, proto.ConfigLogProto, 5));
};


/**
 * @param {?proto.ConfigLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdatesLogProto update = 6;
 * @return {?proto.UpdatesLogProto}
 */
proto.LogProto.prototype.getUpdate = function() {
  return /** @type{?proto.UpdatesLogProto} */ (
    jspb.Message.getWrapperField(this, proto.UpdatesLogProto, 6));
};


/**
 * @param {?proto.UpdatesLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EndLogProto end = 7;
 * @return {?proto.EndLogProto}
 */
proto.LogProto.prototype.getEnd = function() {
  return /** @type{?proto.EndLogProto} */ (
    jspb.Message.getWrapperField(this, proto.EndLogProto, 7));
};


/**
 * @param {?proto.EndLogProto|undefined} value
 * @return {!proto.LogProto} returns this
*/
proto.LogProto.prototype.setEnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.LogProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LogProto} returns this
 */
proto.LogProto.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LogProto.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.StartLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartLogProto}
 */
proto.StartLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartLogProto;
  return proto.StartLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartLogProto}
 */
proto.StartLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InitialConditionsLogProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitialConditionsLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.InitialConditionsLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitialConditionsLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitialConditionsLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    RCRSProto_pb.EntityProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitialConditionsLogProto}
 */
proto.InitialConditionsLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitialConditionsLogProto;
  return proto.InitialConditionsLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitialConditionsLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitialConditionsLogProto}
 */
proto.InitialConditionsLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RCRSProto_pb.EntityProto;
      reader.readMessage(value,RCRSProto_pb.EntityProto.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitialConditionsLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitialConditionsLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitialConditionsLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitialConditionsLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RCRSProto_pb.EntityProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EntityProto entities = 1;
 * @return {!Array<!proto.EntityProto>}
 */
proto.InitialConditionsLogProto.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.EntityProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, RCRSProto_pb.EntityProto, 1));
};


/**
 * @param {!Array<!proto.EntityProto>} value
 * @return {!proto.InitialConditionsLogProto} returns this
*/
proto.InitialConditionsLogProto.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EntityProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EntityProto}
 */
proto.InitialConditionsLogProto.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EntityProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InitialConditionsLogProto} returns this
 */
proto.InitialConditionsLogProto.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CommandLogProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommandLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.CommandLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommandLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    RCRSProto_pb.MessageProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommandLogProto}
 */
proto.CommandLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommandLogProto;
  return proto.CommandLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommandLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommandLogProto}
 */
proto.CommandLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 2:
      var value = new RCRSProto_pb.MessageProto;
      reader.readMessage(value,RCRSProto_pb.MessageProto.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommandLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommandLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommandLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      RCRSProto_pb.MessageProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 time = 1;
 * @return {number}
 */
proto.CommandLogProto.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CommandLogProto} returns this
 */
proto.CommandLogProto.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MessageProto commands = 2;
 * @return {!Array<!proto.MessageProto>}
 */
proto.CommandLogProto.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.MessageProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, RCRSProto_pb.MessageProto, 2));
};


/**
 * @param {!Array<!proto.MessageProto>} value
 * @return {!proto.CommandLogProto} returns this
*/
proto.CommandLogProto.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MessageProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MessageProto}
 */
proto.CommandLogProto.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MessageProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CommandLogProto} returns this
 */
proto.CommandLogProto.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PerceptionLogProto.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PerceptionLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.PerceptionLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PerceptionLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PerceptionLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entityid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    visible: (f = msg.getVisible()) && RCRSProto_pb.ChangeSetProto.toObject(includeInstance, f),
    communicationsList: jspb.Message.toObjectList(msg.getCommunicationsList(),
    RCRSProto_pb.MessageProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PerceptionLogProto}
 */
proto.PerceptionLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PerceptionLogProto;
  return proto.PerceptionLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PerceptionLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PerceptionLogProto}
 */
proto.PerceptionLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityid(value);
      break;
    case 3:
      var value = new RCRSProto_pb.ChangeSetProto;
      reader.readMessage(value,RCRSProto_pb.ChangeSetProto.deserializeBinaryFromReader);
      msg.setVisible(value);
      break;
    case 4:
      var value = new RCRSProto_pb.MessageProto;
      reader.readMessage(value,RCRSProto_pb.MessageProto.deserializeBinaryFromReader);
      msg.addCommunications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PerceptionLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PerceptionLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PerceptionLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PerceptionLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEntityid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVisible();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      RCRSProto_pb.ChangeSetProto.serializeBinaryToWriter
    );
  }
  f = message.getCommunicationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      RCRSProto_pb.MessageProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 time = 1;
 * @return {number}
 */
proto.PerceptionLogProto.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PerceptionLogProto} returns this
 */
proto.PerceptionLogProto.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 entityID = 2;
 * @return {number}
 */
proto.PerceptionLogProto.prototype.getEntityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PerceptionLogProto} returns this
 */
proto.PerceptionLogProto.prototype.setEntityid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ChangeSetProto visible = 3;
 * @return {?proto.ChangeSetProto}
 */
proto.PerceptionLogProto.prototype.getVisible = function() {
  return /** @type{?proto.ChangeSetProto} */ (
    jspb.Message.getWrapperField(this, RCRSProto_pb.ChangeSetProto, 3));
};


/**
 * @param {?proto.ChangeSetProto|undefined} value
 * @return {!proto.PerceptionLogProto} returns this
*/
proto.PerceptionLogProto.prototype.setVisible = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PerceptionLogProto} returns this
 */
proto.PerceptionLogProto.prototype.clearVisible = function() {
  return this.setVisible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PerceptionLogProto.prototype.hasVisible = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MessageProto communications = 4;
 * @return {!Array<!proto.MessageProto>}
 */
proto.PerceptionLogProto.prototype.getCommunicationsList = function() {
  return /** @type{!Array<!proto.MessageProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, RCRSProto_pb.MessageProto, 4));
};


/**
 * @param {!Array<!proto.MessageProto>} value
 * @return {!proto.PerceptionLogProto} returns this
*/
proto.PerceptionLogProto.prototype.setCommunicationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MessageProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MessageProto}
 */
proto.PerceptionLogProto.prototype.addCommunications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MessageProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PerceptionLogProto} returns this
 */
proto.PerceptionLogProto.prototype.clearCommunicationsList = function() {
  return this.setCommunicationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && RCRSProto_pb.ConfigProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigLogProto}
 */
proto.ConfigLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigLogProto;
  return proto.ConfigLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigLogProto}
 */
proto.ConfigLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RCRSProto_pb.ConfigProto;
      reader.readMessage(value,RCRSProto_pb.ConfigProto.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      RCRSProto_pb.ConfigProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigProto config = 1;
 * @return {?proto.ConfigProto}
 */
proto.ConfigLogProto.prototype.getConfig = function() {
  return /** @type{?proto.ConfigProto} */ (
    jspb.Message.getWrapperField(this, RCRSProto_pb.ConfigProto, 1));
};


/**
 * @param {?proto.ConfigProto|undefined} value
 * @return {!proto.ConfigLogProto} returns this
*/
proto.ConfigLogProto.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigLogProto} returns this
 */
proto.ConfigLogProto.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigLogProto.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdatesLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdatesLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdatesLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdatesLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changes: (f = msg.getChanges()) && RCRSProto_pb.ChangeSetProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdatesLogProto}
 */
proto.UpdatesLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdatesLogProto;
  return proto.UpdatesLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdatesLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdatesLogProto}
 */
proto.UpdatesLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 2:
      var value = new RCRSProto_pb.ChangeSetProto;
      reader.readMessage(value,RCRSProto_pb.ChangeSetProto.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdatesLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdatesLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdatesLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdatesLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RCRSProto_pb.ChangeSetProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 time = 1;
 * @return {number}
 */
proto.UpdatesLogProto.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UpdatesLogProto} returns this
 */
proto.UpdatesLogProto.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ChangeSetProto changes = 2;
 * @return {?proto.ChangeSetProto}
 */
proto.UpdatesLogProto.prototype.getChanges = function() {
  return /** @type{?proto.ChangeSetProto} */ (
    jspb.Message.getWrapperField(this, RCRSProto_pb.ChangeSetProto, 2));
};


/**
 * @param {?proto.ChangeSetProto|undefined} value
 * @return {!proto.UpdatesLogProto} returns this
*/
proto.UpdatesLogProto.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdatesLogProto} returns this
 */
proto.UpdatesLogProto.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdatesLogProto.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EndLogProto.prototype.toObject = function(opt_includeInstance) {
  return proto.EndLogProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EndLogProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndLogProto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EndLogProto}
 */
proto.EndLogProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EndLogProto;
  return proto.EndLogProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EndLogProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EndLogProto}
 */
proto.EndLogProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EndLogProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EndLogProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EndLogProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndLogProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto);
